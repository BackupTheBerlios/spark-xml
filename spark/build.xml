<?xml version="1.0"?>
<!DOCTYPE project SYSTEM "project.dtd">
<!--
     Build file for the SWF2XML project. Stolen^H^H^H^Hrongly
     inspired by the build file from the Enhydra Zeus project
-->

<project default="all" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <!-- Allow override of property defaults -->
    <property file="ant-local.properties" />

    <!-- Property defaults -->
    <property name="Name" value="SWF2XML"/>
    <property name="name" value="swf2xml"/>
    <property name="version" value="0.1alpha"/>
    <property name="year" value="2001"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="build.compiler" value="classic"/>
    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>

    <property name="src.dir" value="./src"/>
    <property name="samples.dir" value="./samples"/>
    <property name="test.dir" value="./tests"/>
    <property name="lib.dir" value="./lib"/>

    <property name="build.dir" value="./build"/>
    <property name="build.src" value="./build/src"/>
    <property name="build.dest" value="./build/classes"/>
    <property name="build.javadocs" value="./doc/api"/>
    <property name="build.tests" value="./build/tests"/>
    <property name="javadoc.packages" value="de.tivano.*"/>

    <property name="dist.root" value="./dist"/>
    <property name="dist.dir"
	      value="${dist.root}/${name}-${version}"/>
    
    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>
    
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="${Name} Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   all       -> build everything except the api docs in order (default)"/>
    <echo message="   package   -> generates the ${name}.jar file"/>
    <echo message="   compile   -> compiles the source code"/>
    <echo message="   javadoc   -> generates the API documentation"/>
    <!-- <echo message="   samples   -> generates the ${Name} sample classes"/> -->
    <echo message="   tests     -> generates and runs ${Name} tests"/>
    <echo message="   emacs-jde -> generates .prj.el file for Emacs JDE"/>
    <echo message="   clean     -> cleans up the directory"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy todir="${build.src}"
          filtering="yes">
      <fileset dir="${src.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the sample code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-samples" depends="prepare">
    <!-- create directories -->
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>

    <!-- copy src files -->
    <copy todir="${build.src}"
          filtering="yes">
      <fileset dir="${samples.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src">
    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the samples directory                                       -->
  <!-- =================================================================== -->
  <target name="samples" depends="prepare-samples, compile">
    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <fixcrlf srcdir="." includes="**/*.bat" cr="add"/>
    <fixcrlf srcdir="." includes="**/*.sh" cr="remove"/>
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="org/**"/>
  </target>

  <!-- ==================================================================== -->
  <!-- junit targets                                                       -->
  <!-- =================================================================== -->

  <!-- redefine the junit task to use the provided lib/junit.jar -->
  <!--
  <taskdef name="junit"
           classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
    <classpath>
      <pathelement location="${lib.dir}/junit.jar" /> 
    </classpath>
  </taskdef>
  -->

  <target name="compiletests" depends="compile">
    <mkdir dir="${build.tests}" />
    <javac srcdir="${test.dir}"
               destdir="${build.tests}"
	       debug="${debug}"
	       optimize="${optimize}">
       <include name="**/*.java" />
       <!-- include the build.dir so we can run the tests -->
       <classpath>
           <pathelement path="${build.dir}/classes" />
           <pathelement path="${lib.dir}/junit.jar" />
       </classpath>
    </javac>
  </target>

  <target name="tests" depends="init,compiletests">
    <junit printsummary="yes" fork="yes" haltonfailure="no">
      <classpath>
	<pathelement location="${test.dir}" />
	<pathelement location="${src.dir}" />
	<pathelement path="${java.class.path}" />
	<pathelement path="${build.tests}" />
	<pathelement path="${build.dest}" />
      </classpath>
      <formatter type="plain" />
      <batchtest fork="yes" todir="${build.dir}">
      <fileset dir="${test.dir}">
	    <include name="**/*Test*.java" />
	    <exclude name="**/AllTests.java" />
	  </fileset>
      </batchtest>
    </junit>
    <move todir="${build.dir}">
      <fileset dir=".">
	<include name="TEST-*.txt" />
      </fileset>
    </move>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="prepare-src">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${javadoc.packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${Name} API, ${version}"
             doctitle="${Name} ${version}"
             bottom="Copyright &#169; ${year} Tivano Software GmbH. All Rights Reserved."
    />
  </target>

  <!-- =================================================================== -->
  <!-- The easy way.                                                       -->
  <!-- =================================================================== -->
  <target name="all" depends="compile,compiletests" />

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete dir="${build.javadocs}" />
    <!-- Clean up backup files -->
    <delete>
      <fileset dir="" defaultexcludes="no">
	<include name="**/*~" />
      </fileset>
    </delete>
  </target>

  <target name="distclean" depends="clean">
    <delete dir="${dist.root}"/>
    <delete file="${Name}-${version}.tar.gz"/>
    <delete file="${Name}-${version}.tar"/>
    <delete file="${Name}-${version}.zip"/>
    <delete quiet="true" file=".jde.properties" />
    <delete quiet="true" file=".prj.el" />
  </target>

  <!-- =================================================================== -->
  <!-- IDE targets                                                         -->
  <!-- =================================================================== -->
  <!-- generate an appropriate .prj.el file for JDE -->
  <target name="emacs-jde" depends="init">
    <echo file=".jde.properties">
jde.classpath="${java.class.path}${path.separator}${build.dir}/classes${path.separator}${build.dir}/tests"</echo>
    <echo append="true" file=".jde.properties">
jde.srcdirs="${src.dir}${path.separator}${test.dir}"</echo>
    <replace file=".jde.properties" token="${path.separator}" value='" "' />
    <echo append="true" file=".jde.properties">
jde.basedir=${basedir}</echo>
    <copy file=".prj.el.in" tofile=".prj.el" />
    <replace file=".prj.el" propertyfile=".jde.properties">
      <replacefilter token="@jde.basedir@"   property="jde.basedir" />
      <replacefilter token="@jde.classpath@" property="jde.classpath" />
      <replacefilter token="@jde.srcdirs@" property="jde.srcdirs" />
    </replace>
  </target>
</project>

<!-- End of file -->
